{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/UI/Modal/Modal.js","components/UI/Button/Button.js","components/UI/Modal/Modal.module.css","components/UI/Button/Button.module.css","hoc/withErrorHandler/withErrorHandler.js","components/Burger/Burger.module.css","components/Burger/Ingredient/Ingredient.module.css","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Burger/Ingredient/Ingredient.js","components/Burger/Burger.js","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touached","email","street","zipCode","minLength","maxLength","country","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","price","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","touched","updatedForm","setState","formElementsArray","key","this","push","id","config","onSubmit","map","formElement","Input","changed","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","orderData","orderActions","withErrorHandler","axiosOrders","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","loader","module","exports","Modal","nextProps","nextState","show","children","modalClosed","transform","opacity","join","onClick","WrappedComponent","axios","error","errorConfirmedHandler","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","eject","message","inputElement","inputClasses","InputElement","Invalid","onChange","option","Label","label","Ingredient","ingredient","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","transformedIngredients","Object","keys","igKey","Array","_","i","reduce","arr","el","concat","length"],"mappings":"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","file":"static/js/3.da93b752.chunk.js","sourcesContent":["import React from 'react'\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nconst CheckoutSummary = (props) => {\r\n\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>\r\n                    CANCEL\r\n            </Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>\r\n                    CONTINUE\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary;","import React, { Component } from 'react'\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axiosOrders from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport * as orderActions from '../../../store/actions/order';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport {updateObject, checkValidity} from '../../../shared/utility';\r\n\r\nexport class ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touached: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touached: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touached: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touached: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touached: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue:'Fastest'},\r\n                        {value: 'cheapest', displayValue:'Cheapest'},\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            },\r\n        },\r\n        formIsValid: false\r\n    }\r\n    \r\n    orderHandler = (event) => {\r\n        event.preventDefault(); // to prevent form from reloading page\r\n        \r\n\r\n        const formData = {};\r\n        for( let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.price,\r\n            formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        })\r\n        \r\n        const updatedForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]: updatedFormElement\r\n        });        \r\n \r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedForm) {\r\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            orderForm: updatedForm,\r\n            formIsValid: formIsValid\r\n        });\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.orderForm[key],\r\n            })\r\n        }\r\n\r\n        let orderForm = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType} \r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                        valid={formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={! this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            orderForm = <Spinner/>\r\n        }\r\n\r\n        return ( \r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {orderForm}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// ---------------- REDUX CONFIGURATION  ---------------- \r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(orderActions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axiosOrders))\r\n","import React, { Component } from 'react'\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>;\r\n        \r\n        if (this.props.ingredients) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                            ingredients={this.props.ingredients}\r\n                            checkoutCancelled={this.checkoutCancelledHandler}\r\n                            checkoutContinued={this.checkoutContinuedHandler}/>\r\n                    <Route \r\n                            path={this.props.match.path + '/contact-data'} \r\n                            component={ContactData}/>\r\n                </div>);\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\n// ---------------- REDUX CONFIGURATION  ---------------- \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from 'react'\r\nimport classes from './Spinner.module.css';\r\n\r\nconst Spinner = props => (\r\n    <div className={classes.loader}>Loading...</div>\r\n);\r\n\r\nexport default Spinner\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner_loader__JqLsB\",\"load6\":\"Spinner_load6__axrju\",\"round\":\"Spinner_round__17wmP\"};","import React, {Component} from 'react'\r\nimport classes from './Modal.module.css'\r\nimport Auxiliary from '../../../hoc/Auxiliary/Auxiliary'\r\nimport Backdrop from '../Backdrop/Backdrop'\r\n\r\nclass Modal extends Component {\r\n    // Performance fix, to not uneccessarily render the modal and its components\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        // only update when showing or hiding the modal\r\n        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n    }\r\n\r\n    // componentWillUpdate() {\r\n    //     console.log('[Modal] WillUpdate')\r\n    // }\r\n    \r\n    render() {\r\n    return (\r\n        <Auxiliary>\r\n            <Backdrop show={this.props.show} clicked={this.props.modalClosed}/>\r\n            <div \r\n                className={classes.Modal}\r\n                style={{\r\n                    transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                    opacity: this.props.show ? '1' : '0'\r\n                    \r\n                }}>\r\n                {this.props.children}\r\n            </div>\r\n        </Auxiliary>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react'\r\nimport classes from './Button.module.css'\r\n\r\nconst Button = (props) => (\r\n    <button \r\n        className={[classes.Button, classes[props.btnType]].join(' ')}\r\n        onClick={props.clicked}\r\n        disabled={props.disabled}>\r\n            {props.children}\r\n    </button>\r\n)\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__20bxc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3HRBy\",\"Success\":\"Button_Success__zyN8J\",\"Danger\":\"Button_Danger__3_TiA\"};","import React, { Component } from 'react'\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport Auxiliary from '../Auxiliary/Auxiliary';\r\n\r\nconst withErrorHandler = (WrappedComponent, axios) => {\r\n    return class extends Component{\r\n        state = {\r\n            error: null\r\n        }\r\n        componentWillMount() {\r\n            // clear error on request\r\n            this.reqInterceptor = axios.interceptors.request.use(\r\n                req => {\r\n                    this.setState({ error: null})\r\n                    return req;\r\n                }\r\n            )\r\n            // set error on response\r\n            this.resInterceptor = axios.interceptors.response.use(\r\n                res => res,\r\n                err => {\r\n                    this.setState({\r\n                        error: err\r\n                    })\r\n                }\r\n            )\r\n        }\r\n        \r\n        componentWillUnmount() {\r\n            axios.interceptors.request.eject(this.reqInterceptor);\r\n            axios.interceptors.request.eject(this.resInterceptor);\r\n        }\r\n        errorConfirmedHandler = () => {\r\n            this.setState({\r\n                error: null\r\n            });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Auxiliary>\r\n                    <Modal \r\n                        show={this.state.error}\r\n                        modalClosed={this.errorConfirmedHandler}\r\n                    >\r\n                        {this.state.error ? this.state.error.message : null}\r\n                    </Modal>\r\n                    <WrappedComponent {...this.props} />\r\n                </Auxiliary>\r\n            );\r\n        }\r\n       \r\n    }\r\n}\r\n\r\nexport default withErrorHandler\r\n ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger_Burger__c9Ic3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"Ingredient_BreadBottom__3R5in\",\"BreadTop\":\"Ingredient_BreadTop__3yAaP\",\"Seeds1\":\"Ingredient_Seeds1__1lfJT\",\"Seeds2\":\"Ingredient_Seeds2__3HR5d\",\"Meat\":\"Ingredient_Meat__spgjr\",\"Cheese\":\"Ingredient_Cheese__3QKZf\",\"Salad\":\"Ingredient_Salad__3OsWS\",\"Bacon\":\"Ingredient_Bacon__3vgZG\"};","import React from 'react'\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (! props.valid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}  \r\n                    onChange={props.changed}\r\n                    value={props.value}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1MKbw\",\"Label\":\"Input_Label__3YVCc\",\"InputElement\":\"Input_InputElement__1wfRc\",\"Invalid\":\"Input_Invalid__3pK1R\"};","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport classes from './Ingredient.module.css';\r\n\r\nclass Ingredient extends Component{\r\n    state = {\r\n        ingredient: null\r\n    }\r\n    render() {\r\n        switch (this.props.type) {\r\n            case('bread-bottom'):\r\n                this.ingredient = (<div className={classes.BreadBottom}></div>);\r\n                break;\r\n            case('bread-top'):\r\n                this.ingredient = (\r\n                    <div className={classes.BreadTop}>\r\n                        <div className={classes.Seeds1}></div>\r\n                        <div className={classes.Seeds2}></div>\r\n                    </div>);\r\n                break;\r\n            case('meat'):\r\n                this.ingredient = (\r\n                    <div className={classes.Meat}></div>);\r\n                break;\r\n            case('cheese'):\r\n                this.ingredient = (\r\n                    <div className={classes.Cheese}></div>);\r\n                break;\r\n            case('salad'):\r\n                this.ingredient = (\r\n                    <div className={classes.Salad}></div>);\r\n                break;\r\n            case('bacon'):\r\n                this.ingredient = (\r\n                    <div className={classes.Bacon}></div>);\r\n                break;\r\n            default:\r\n                this.ingredient = null\r\n        }\r\n        return this.ingredient;\r\n    }   \r\n}\r\n\r\nIngredient.propTypes = {\r\n    type: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Ingredient;\r\n","import React from 'react'\r\nimport classes from './Burger.module.css'\r\nimport Ingredient from './Ingredient/Ingredient'\r\n// import {withRouter} from 'react-router-dom';\r\n\r\nconst Burger = (props) => {\r\n    let transformedIngredients = Object.keys(props.ingredients)\r\n        .map(igKey => {\r\n            return [...Array(props.ingredients[igKey])].map((_, i) => {\r\n                return (<Ingredient key={igKey + i} type={igKey}/>)\r\n            })\r\n        }).reduce((arr, el) => { // flatten array\r\n            return arr.concat(el);\r\n        }, []);\r\n\r\n    \r\n    if (transformedIngredients.length === 0) {\r\n        transformedIngredients = <p>Please start adding ingredients</p>\r\n    }\r\n    return (\r\n        <div className={classes.Burger}>\r\n            <Ingredient type=\"bread-top\"/>\r\n            {transformedIngredients}\r\n            <Ingredient type=\"bread-bottom\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Burger;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3pMgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1V_Wt\"};"],"sourceRoot":""}