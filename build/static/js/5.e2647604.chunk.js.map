{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/UI/Button/Button.js","components/UI/Button/Button.module.css","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touached","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","touched","setState","submitHandler","preventDefault","console","log","props","onAuth","switchAuthModeHandler","prevState","this","building","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","changed","shouldValidate","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","dispatch","authActions","Spinner","loader","Button","join","onClick","disabled","children","Input","inputElement","inputClasses","InputElement","Invalid","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/5.e2647604.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2m4EM\"};","import React, { Component } from 'react'\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as authActions from '../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {updateObject, checkValidity} from '../../shared/utility';\r\n\r\nexport class Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touached: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touached: false\r\n            },\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (! this.props.building && this.props.authRedirectPath !== '/') {\r\n            // reset path\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        })\r\n\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log('submitHandler')\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup}\r\n        });\r\n    }\r\n\r\n    \r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key],\r\n            })\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                valid={formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n            />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner/>\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}                    \r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Redux config\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        building: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(authActions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(authActions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from 'react'\r\nimport classes from './Spinner.module.css';\r\n\r\nconst Spinner = props => (\r\n    <div className={classes.loader}>Loading...</div>\r\n);\r\n\r\nexport default Spinner\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner_loader__JqLsB\",\"load6\":\"Spinner_load6__axrju\",\"round\":\"Spinner_round__17wmP\"};","import React from 'react'\r\nimport classes from './Button.module.css'\r\n\r\nconst Button = (props) => (\r\n    <button \r\n        className={[classes.Button, classes[props.btnType]].join(' ')}\r\n        onClick={props.clicked}\r\n        disabled={props.disabled}>\r\n            {props.children}\r\n    </button>\r\n)\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3HRBy\",\"Success\":\"Button_Success__zyN8J\",\"Danger\":\"Button_Danger__3_TiA\"};","import React from 'react'\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (! props.valid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}  \r\n                    onChange={props.changed}\r\n                    value={props.value}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1MKbw\",\"Label\":\"Input_Label__3YVCc\",\"InputElement\":\"Input_InputElement__1wfRc\",\"Invalid\":\"Input_Invalid__3pK1R\"};"],"sourceRoot":""}